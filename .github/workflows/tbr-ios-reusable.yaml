name: Common Build Steps For IOS
on:
  workflow_call:
    secrets:
      GET_CODE_FROM_PRIVATE_REPO:
        description: 'Secret for accessing private repo'
        required: true
      API_URL:
        description: 'API URL for the environment'
        required: true
      P12_PASSWORD:
        description: 'Gradle properties for the environment'
        required: true
      KEYCHAIN_PASSWORD:
        description: 'Keystore password for the environment'
        required: true
      BUILD_CERTIFICATE_BASE64:
        description: 'Certificate for the environment'
        required: true
      BUILD_PROVISION_PROFILE_BASE64:
        description: 'Provision Profile for the environment'
        required: true
      AZURE_CLIENT_ID:
        description: 'Azure Client ID for Login to blob'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure TENANT ID for Login to blob'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure TENANT ID for Login to blob'
        required: true
      AZURE_STORAGE_FOR_UPLOAD:
        description: 'Azure storage account for uploading APK'
        required: true
      UPLOAD_APK_ACCOUNT_KEY:
        description: 'Azure storage account key for uploading APK'
        required: true
    inputs:
      environment:
        type: string
        description: 'Environment for the build'
        required: true
        default: 'Frontend_Development'
      target_branch:
        description: Name of the branch for initializing build from TBR Frontend repo
        default: 'main'
        type: string
      folder:
        type: string
        required: true
      appName:
        type: string
        required: true
        default: 'The Bike Rentals'
jobs:
  build-steps:
    runs-on: macOS-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Set Branch name for Future Use
        run: |
          target_branch=${{ inputs.target_branch || 'main' }}
          echo "target_branch=$target_branch" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          repository: The-Bike-Rentals/tbr-frontend
          ref: ${{ env.target_branch }}
          token: ${{ secrets.GET_CODE_FROM_PRIVATE_REPO }}
      - name: Run npm Install
        run: |
          npm i -g corepack
          npm install --force
      - name: Generate config.json for the environment
        run: |
          API_URL=${{ secrets.API_URL }}
          cat > src/config/config.json <<EOL
          {
            "apiBaseUrl": "$API_URL",
            "env": "${{ inputs.environment }}"
          }
          EOL
      - name: Generate and Save certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
          cp $PP_PATH ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles
      - name: Install Cocoapods
        run: |
          sudo gem install cocoapods
          pod repo update
      - name: Install Pods
        run: |
          bundle install
          cd ios
          pod install --repo-update
          cd ..
          npx react-native build-ios --mode Release
      
      - name: build archive
        run: |
          xcodebuild -scheme "tbr" \
          -workspace ios/tbr.xcworkspace \
          -archivePath $RUNNER_TEMP/tbr.xcarchive \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          clean archive     
      
      - name: export ipa
        run: |
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/tbr.xcarchive -exportPath $RUNNER_TEMP/build -exportOptionsPlist ./ios/tbr/Info.plist -allowProvisioningUpdates

      - name: 'LOGIN TO AZURE - Upload to Blob'
        uses: azure/login@v2
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload to blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload --account-name ${{ secrets.AZURE_STORAGE_FOR_UPLOAD }} --auth-mode login -f ${{ runner.temp }}/build/tbr.ipa -c ipas -n ${{inputs.folder}}/tbr_${{ github.run_number }}_${{ github.run_attempt }}.ipa
